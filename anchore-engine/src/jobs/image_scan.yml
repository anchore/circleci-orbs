description: |
  Performs a static security analysis of docker container with anchore engine.
  A custom policy can be used for evaluation, add custom Anchore policy bundle
  to .circleci/.anchore/policy_bundle.json in your repository. Anchore engine pulls
  image from public/private docker registries. Requires registry credentials
  to access private images, use ENV vars $DOCKER_USER & $DOCKER_PASS

executor: anchore_engine

parameters:
  after_checkout:
    description: Optional steps to run after checking out the code.
    type: steps
    default: []
  before_analyze:
    description: Optional steps to run before analyzing the docker image.
    type: steps
    default: []
  after_analyze:
    description: Optional steps to run after analyzing the docker image.
    type: steps
    default: []
  image_name:
    description: Image repository & tag (eg - docker.io/anchore/anchore-engine:latest).
    type: string
 private_registry:
    description: Set to True if image is only accessible from a private registry.
    type: boolean
    default: False
  registry_name:
    description: Name of private registry (eg - docker.io)
    type: string
    default: docker.io
  registry_user:
    description: Username for private registry (use env var $DOCKER_USER to populate).
    type: string
    default: $DOCKER_USER
  registry_pass:
    description: Password for private registry (use env var $DOCKER_PASS to populate).
    type: string
    default: $DOCKER_PASS

steps:
  - setup_remote_docker:
      docker_layer_caching: true
  - checkout
  - when:
      name: Run after_checkout life cycle hook steps.
      condition: << parameters.after_checkout >>
      steps: << parameters.after_checkout >>
  - start_engine
  - when:
      name: Run before_analyze life cycle hook steps.
      condition: << parameters.before_analyze >>
      steps: << parameters.before_analyze >>
  - when:
      condition: << parameters.private_registry >>
      steps:
        - add_private_registry:
            registry_name: << parameters.registry_name >>
            registry_user: << parameters.registry_user >>
            registry_pass: << parameters.registry_pass >>
  - analyze_image:
      image_name: << parameters.image_name >>
  - when:
      name: Run after_analyze life cycle hook steps.
      condition: << parameters.after_analyze >>
      steps: << parameters.after_analyze >>
  - parse_reports
  - store_artifacts:
      path: anchore-reports
